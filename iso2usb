#!/usr/bin/env bash
#
#
# Author: Jean-Noel Dot  <prenom nom @ fournisseur.fr> 2013-2016
#
# VERSION 6
#
# AVEC 1 paramètre : /path/to/archlinux.iso
# Example : $ iso2usb ~/99-Isos/archlinux-2012.12.01-dual.iso
# ou
# SANS PARAMETRE : par défaut dans /home/jnd/99-Isos
# Example : $ iso2usb
#

# COULEURS
Bold=$(tput bold)
Underline=$(tput sgr 0 1)
Reset=$(tput sgr0)
# Regular Colors
Red=$(tput setaf 1)
Green=$(tput setaf 2)
Yellow=$(tput setaf 3)
Blue=$(tput setaf 4)
Purple=$(tput setaf 5)
Cyan=$(tput setaf 6)
White=$(tput setaf 7)
# Bold
BRed=${Bold}$(tput setaf 1)
BGreen=${Bold}$(tput setaf 2)
BYellow=${Bold}$(tput setaf 3)
BBlue=${Bold}$(tput setaf 4)
BPurple=${Bold}$(tput setaf 5)
BCyan=${Bold}$(tput setaf 6)
BWhite=${Bold}$(tput setaf 7)


# FONCTIONS
msg_titre() {
    local mesg=$1; shift
    printf "${BWhite}${mesg}${Reset}\n" "$@" >&2
}

msg() {
    local mesg=$1; shift
    printf "${BWhite}:: ${mesg}${Reset}\n" "$@" >&2
}

msg_green() {
    local mesg=$1; shift
    printf "${BGreen}:: ${mesg}${Reset}\n" "$@" >&2
}

msg_newline() {
    local mesg=$1; shift
    printf "\n" "$@" >&2
}

error() {
    local mesg=$1; shift
    printf "${BRed}==> ERREUR:${Reset}${BWhite} ${mesg}${Reset}\n" "$@" >&2
}

cleanup() {
    [[ $1 ]] && exit $1
}

die() {
    error "$*"
    cleanup 1
}

read_key() {
    printf '%s' "${BYellow}"
    read -p "$1 et appuyer sur une touche" OPTION
    printf '%s' "${Reset}"
}

contains_element() {
    #check if an element exist in a string
    for e in "${@:2}"; do [[ $e == $1 ]] && break; done;
}

invalid_option() {
    printf '%s\n' "${BRed}Option invalide. Essayez une autre option.${Reset}"
}

# Variables globales
IS_USB_KEY=0
DEVICE_USB_KEY=""
PATH_TO_ISO=""
DIR_ISOS="/home/jnd/99-Isos"

# Variables du script
nom_script="$0"
nombre_d_argument="$#"
path_to_iso="$1"

# => Passe en root
if (( EUID != 0 )); then
    printf '\n%s\n' "${BYellow}Le script $0 doit être exécuté en «root»."
    printf '%s\n' "Entrer le mot de passe de «root»${Reset}"
    exec su -c "${0} ${1}"
    exit ${?}
fi

# Titre
msg_titre "+------------------------------------------------+"
msg_titre "|                                                |"
msg_titre "|       Écriture de fichier ISO sur clé USB      |"
msg_titre "|                                                |"
msg_titre "+------------------------------------------------+"

# Test si 1 argument
if (( $# == 1 )); then
    # Test si $1 = archlinux.iso existe et est un fichier
    if [[ ! -f "$1" ]]; then
        die "Le ficher ""$1" "n'existe pas. Usage : iso2usb /chemin/vers/archlinux.iso""\n"
    else
        PATH_TO_ISO="$1"
    fi
else
    # Pas d'argument. Fabrique une liste des isos
    liste_isos=($(LC_ALL=C ls "${DIR_ISOS}" | grep -E ".iso$"))
    PS3="Entrer le n° de l'option choisie: "
    printf '\n%s\n' "${BWhite}Sélectionner le fichier iso à graver sur USB :${Reset}"
    select CHOIX_ISO in "${liste_isos[@]}"; do
        if contains_element "$CHOIX_ISO" "${liste_isos[@]}"; then
            break
        else
            invalid_option
        fi
    done
    PATH_TO_ISO="${DIR_ISOS}/${CHOIX_ISO}"
fi

msg_newline
msg "L'ISO suivante sera écrite sur la clé USB : ${PATH_TO_ISO}"

# date +%Y-%m-%d" "%H:%M:%S => 2012-12-13 19:46:11
DATEDUJOUR=$(date +%Y-%m-%d" "%H:%M:%S)

read_key "Brancher une clé USB"
sleep 1

# 1) Test si 1 clé USB a été branchée
is_usb_key_attached=$(journalctl --since="${DATEDUJOUR}" | grep -E "\[sd[b-z]\].*Attached SCSI removable disk" | awk '{print $8}' | sed -e "s/\[//" | sed -e "s/\]//")
if [[ $is_usb_key_attached == "" ]]; then
    die "Aucne clé USB n'a été branchée."
    IS_USB_KEY=0
else
    DEVICE_USB_KEY=${is_usb_key_attached}
    IS_USB_KEY=1
fi

# 2) Test si la clé USB est toujours branchée
if (( $IS_USB_KEY == 1 )); then
    is_usb_key_disconnect=$(journalctl --since="${DATEDUJOUR}" | grep -E "USB disconnect, device number")
    echo ${is_usb_key_disconnect} | tr "[:upper:]" "[:lower:]" | grep -q disconnect
    if ( $? == 0 )); then
        die "La clé USB a été débranchée."
        IS_USB_KEY=0
    else
        IS_USB_KEY=2
    fi
fi

# 3) Test si la clé USB n'est pas montée
if (( $IS_USB_KEY == 2 )); then
    is_usb_key_mounted=$(lsblk | grep -E "$DEVICE_USB_KEY""[1-9]" | awk '{print $7}')
    echo ${is_usb_key_mounted} | tr "[:upper:]" "[:lower:]" | grep -q media
    if ( $? == 0 )); then
        die "La clé USB est montée."
        IS_USB_KEY=0
    else
        IS_USB_KEY=3
    fi
fi

# 4) Test si taille clé USB > taille iso
if (( $IS_USB_KEY == 3 )); then
#    size_usb_key=$(fdisk -l /dev/$DEVICE_USB_KEY 2> /dev/null | awk '{print $4}' | grep -E "octets" | sed -e "s/.octets,//")
    size_usb_key=$(fdisk -l /dev/$DEVICE_USB_KEY 2> /dev/null | awk '/octets,/ {print $5}' | sed -e "s/.octets,//")
    size_iso=$(ls -la $PATH_TO_ISO | awk '{print $5}')
    if [[ $size_iso -ge $size_usb_key ]] ; then
        die "Taille du fichier ISO >= Taille de la clé USB «$DEVICE_USB_KEY» ."
    else
        IS_USB_KEY=4
    fi
fi

# 5) Commande dd bs=4M if=/path/to/archlinux.iso of=/dev/sdx
if (( $IS_USB_KEY == 4 )); then
    # Calcul du sha1sum de ISO
    msg "Calcul du sha1sum de l'ISO ..."
    sha1sum_iso=$(sha1sum $PATH_TO_ISO | cut -d " " -f 1)
    # Écriture de l'ISO sur la clé USB
    msg "Écriture de l'ISO sur la clé USB «$DEVICE_USB_KEY» ..."
    dd bs=4M if=$PATH_TO_ISO of=/dev/$DEVICE_USB_KEY 2>/dev/null
    if (( $? != 0 )); then
        die "L'écriture de l'ISO sur la clé USB «$DEVICE_USB_KEY» a échoué."
    fi
    sync
    # Calcul du sha1sum de la clé USB
    msg "Calcul du sha1sum de la clé USB «$DEVICE_USB_KEY» ..."
    sha1sum_usb=$(dd if=/dev/$DEVICE_USB_KEY count=$(( $(stat -c %s $PATH_TO_ISO) / 512 )) 2>/dev/null | sha1sum | cut -d " " -f 1)
    # Test si sha1sum ok
    if [[ $sha1sum_usb != $sha1sum_iso ]] ;then
        die "Données sur la clé USB «$DEVICE_USB_KEY» erronées."
    fi
fi

# FIN
msg "Écriture de l'ISO sur la clé USB «$DEVICE_USB_KEY» réalisée avec succès."

read_key "Retirer la clé USB"

exit 0
