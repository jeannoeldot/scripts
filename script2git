#!/usr/bin/env bash
#
# Author: Jean-Noel Dot  <prenom nom @ fournisseur.fr> 2014,2015
#
# Name : script2git
#
# Version : 0.1.3
#
# AVEC 1 paramètres : script2git "motifs du commit"
# Example : $ script2git "Ajout N° Catégories dans Dialog"
# ou
# SANS paramètre : script2git
# Example : $ script2git
# Par défaut : motifs = "Mises à jour"
#

################################
## POUR TEST
#set -x
################################

# COULEURS
Bold=$(tput bold)
Underline=$(tput sgr 0 1)
Reset=$(tput sgr0)
# Regular Colors
Red=$(tput setaf 1)
Green=$(tput setaf 2)
Yellow=$(tput setaf 3)
Blue=$(tput setaf 4)
Purple=$(tput setaf 5)
Cyan=$(tput setaf 6)
White=$(tput setaf 7)
# Bold
BRed=${Bold}$(tput setaf 1)
BGreen=${Bold}$(tput setaf 2)
BYellow=${Bold}$(tput setaf 3)
BBlue=${Bold}$(tput setaf 4)
BPurple=${Bold}$(tput setaf 5)
BCyan=${Bold}$(tput setaf 6)
BWhite=${Bold}$(tput setaf 7)


# FONCTIONS
msg_titre() {
        local mesg=$1; shift
        printf "${Bold}${mesg}${Reset}\n" "$@" >&2
}

msg() {
        local mesg=$1; shift
        printf "${Bold}:: ${mesg}${Reset}\n" "$@" >&2
}

msg_green() {
        local mesg=$1; shift
        printf "${BGreen}:: ${mesg}${Reset}\n" "$@" >&2
}

msg_newline() {
        local mesg=$1; shift
        printf "\n" "$@" >&2
}

error() {
        local mesg=$1; shift
        printf "${BRed}==> ERREUR:${Reset}${Bold} ${mesg}${Reset}\n" "$@" >&2
}

cleanup() {
        [[ $1 ]] && exit $1
}

die() {
        error "$*"
        cleanup 1
}

usage() {
        printf '%s\n' "Arguments :"
        printf '%s\n' "-h                 Cette aide."
        printf '%s\n' "-m <motif>         motif : Motifs du commit. Facultatif: Par défaut = \"Mises à jour\""
        cleanup 0
}


# Variables globales
DIR_SCRIPTS="/home/jnd/01-scripts"
DIR_GIT="/home/jnd/02-git/scripts"

MOTIF_PAR_DEFAUT="Mises à jour"

CONTENU_MOTIF=""


# Variables du script
# nom_script="$0"
# nombre_d_argument="$#"
# contenu_motif="$1"


# Titre
msg_titre " +--------------------------------------------+"
msg_titre " |                                            |"
msg_titre " |                 SCRIPT2GIT                 |"
msg_titre " |                                            |"
msg_titre " | Usage : script2git [-m \"motifs du commit\"] |"
msg_titre " |                                            |"
msg_titre " | script2git -h pour lire l'aide             |"
msg_titre " +--------------------------------------------+"
msg_newline


# DÉBUTS DES TESTS DES ARGUMENTS
# Variables tests arguments
arg_motif=

while getopts 'h:m:' arg; do
        case "$arg" in
                m) arg_motif="$OPTARG" ;;
                h|*) usage ;;
        esac
done

# Test si arg_motif existe. Par défaut = "Mises à jour"
if [[ "$arg_motif" != "" ]]; then
#    echo "==> Argument -m \"motifs du commit\" = "$arg_motif
    CONTENU_MOTIF="$arg_motif"
#    echo "CONTENU_MOTIF = "${CONTENU_MOTIF}
else
    CONTENU_MOTIF="${MOTIF_PAR_DEFAUT}"
#    echo "PAR DEFAUT, CONTENU_MOTIF = "${CONTENU_MOTIF}
fi

# DÉBUTS MISES À JOUR SUR GIT
# Effacement des fichiers ~ dans ${DIR_SCRIPTS}
msg_newline
msg "Effacement des fichiers « *~ » dans « ${DIR_SCRIPTS} »"
find ${DIR_SCRIPTS} -name *~ -exec /usr/bin/rm -vf {} \;


# Copie des scripts de ${DIR_SCRIPTS} vers ${DIR_GIT}
msg_newline
msg "Copie des scripts de « ${DIR_SCRIPTS} » vers « ${DIR_GIT} »"
# Effacement de ${DIR_GIT}/README
rm -f ${DIR_GIT}/README
# Copie des scripts
cp -vf ${DIR_SCRIPTS}/Backup/backup ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/Backup/backup-nosauve ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/Backup/backup-ob ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/Creation-PKG-Tempfs/mkpkg-tmpfs ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/Creation-PKG-Tempfs/mkpkg-chroot-repo ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/init-mirrorlist-pacnew/maj-mirrorlist ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/iso2usb/iso2usb ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/Maj-pacman/maj-pacman ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/Maj-refind/maj-refind ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/Maj-refind/modif-refind-conf ${DIR_GIT}/
rm -rf ${DIR_GIT}/icones-arch
cp -R ${DIR_SCRIPTS}/Maj-refind/icones-arch ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/Maj-Repos/maj-repolocal ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/Maj-sudoers/maj-sudoers ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/Modif-qt-conf/modif-qt4-conf ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/Modif-qt-conf/modif-qt5-conf ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/To-git/dev2git ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/To-git/script2git ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/verif-deps/verif-deps ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/clean-backups ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/dpi.py ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/lls ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/ompload ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/rpmextract.sh ${DIR_GIT}/
cp -vf ${DIR_SCRIPTS}/search.sh ${DIR_GIT}/

# Création nouveau ${DIR_GIT}/README
echo 'Repository de mes scripts contenus dans ~/01-scripts.' > ${DIR_GIT}/README
echo '=====================================================' >> ${DIR_GIT}/README
echo '' >> ${DIR_GIT}/README
echo 'Répertoire : Backup' >> ${DIR_GIT}/README
echo ' -> backup' >> ${DIR_GIT}/README
echo ' -> backup-ob' >> ${DIR_GIT}/README
echo ' -> backup-nosauve' >> ${DIR_GIT}/README
echo '' >> ${DIR_GIT}/README
echo 'Répertoire : Creation-PKG-Tempfs' >> ${DIR_GIT}/README
echo ' -> mkpkg-tmpfs' >> ${DIR_GIT}/README
echo ' -> mkpkg-chroot-repo' >> ${DIR_GIT}/README
echo '' >> ${DIR_GIT}/README
echo 'Répertoire : init-mirrorlist-pacnew' >> ${DIR_GIT}/README
echo ' -> maj-mirrorlist' >> ${DIR_GIT}/README
echo '' >> ${DIR_GIT}/README
echo 'Répertoire : iso2usb' >> ${DIR_GIT}/README
echo ' -> iso2usb' >> ${DIR_GIT}/README
echo '' >> ${DIR_GIT}/README
echo 'Répertoire : Maj-pacman' >> ${DIR_GIT}/README
echo ' -> maj-pacman' >> ${DIR_GIT}/README
echo '' >> ${DIR_GIT}/README
echo 'Répertoire : Maj-refind' >> ${DIR_GIT}/README
echo ' -> maj-refind' >> ${DIR_GIT}/README
echo ' -> modif-refind-conf' >> ${DIR_GIT}/README
echo ' -> icones-arch' >> ${DIR_GIT}/README
echo '' >> ${DIR_GIT}/README
echo 'Répertoire : Maj-Repos' >> ${DIR_GIT}/README
echo ' -> maj-repolocal' >> ${DIR_GIT}/README
echo '' >> ${DIR_GIT}/README
echo 'Répertoire : Maj-sudoers' >> ${DIR_GIT}/README
echo ' -> maj-sudoers' >> ${DIR_GIT}/README
echo '' >> ${DIR_GIT}/README
echo 'Répertoire : Modif-qt-conf' >> ${DIR_GIT}/README
echo ' -> modif-qt4-conf' >> ${DIR_GIT}/README
echo ' -> modif-qt5-conf' >> ${DIR_GIT}/README
echo '' >> ${DIR_GIT}/README
echo 'Répertoire : To-git' >> ${DIR_GIT}/README
echo ' -> dev2git' >> ${DIR_GIT}/README
echo ' -> script2git' >> ${DIR_GIT}/README
echo '' >> ${DIR_GIT}/README
echo 'Répertoire : verif-deps' >> ${DIR_GIT}/README
echo ' -> verif-deps' >> ${DIR_GIT}/README
echo '' >> ${DIR_GIT}/README
echo '' >> ${DIR_GIT}/README
echo 'Racine :' >> ${DIR_GIT}/README
echo ' -> clean-backups' >> ${DIR_GIT}/README
echo ' -> dpi.py' >> ${DIR_GIT}/README
echo ' -> lls' >> ${DIR_GIT}/README
echo ' -> ompload' >> ${DIR_GIT}/README
echo ' -> rpmextract.sh' >> ${DIR_GIT}/README
echo ' -> search.sh' >> ${DIR_GIT}/README


# Commande git add --all
msg_newline
msg "Commande « git add --all »"
cd ${DIR_GIT}
git add --all

# Commande git commit -m "motifs du commit"
msg_newline
msg "Commande « git commit -m \"${CONTENU_MOTIF}\" »"
git commit -m "\"${CONTENU_MOTIF}\""

# Commande git push origin master"
msg_newline
msg "Commande « git push origin master »"
git push origin master



cd

################################
## POUR TEST
#set +x
################################

exit 0

=======================================================================================
## POUR TEST

