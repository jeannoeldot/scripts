#!/usr/bin/env bash
#
# Author: Jean-Noel Dot  <prenom nom @ fournisseur.fr> 2012-2015
# 
# Purpose: Vérifie les dépendances de mes paquets
# situés dans ~/00-repolocal
#
#
# Version : 0.8.2
#

# REPERTOIRES
## TEST
#DIR_REPO=/home/jnd/01-scripts/verif-deps/Construction_V-06/repo_vd
DIR_REPO=~/00-repolocal
##
DIR_TEMP=/tmp/jndvdeps


export LANG=C

# COLORS
# Regular Colors
Normal='\e[0m'		# Normal
Black='\e[0;30m'        # Black
Blue='\e[0;34m'         # Blue
Cyan='\e[0;36m'         # Cyan
Green='\e[0;32m'        # Green
Purple='\e[0;35m'       # Purple
Red='\e[0;31m'          # Red
White='\e[0;37m'        # White
Yellow='\e[0;33m'       # Yellow
# Bold
BBlack='\e[1;30m'       # Black
BBlue='\e[1;34m'        # Blue
BCyan='\e[1;36m'        # Cyan
BGreen='\e[1;32m'       # Green
BPurple='\e[1;35m'      # Purple
BRed='\e[1;31m'         # Red
BWhite='\e[1;37m'       # White
BYellow='\e[1;33m'      # Yellow
# Ialic
IRed='\e[3;31m'         # Red
#
NOCOLOR=$Normal
#

## POUR TEST
#set -x
##
#
# FONCTIONS
#

msg() {
  local mesg=$1; shift
  printf "${BWhite}:: ${mesg}${NOCOLOR}\n" "$@" >&2
}

msg_titre() {
  local mesg=$1; shift
  printf "${BWhite}${mesg}${NOCOLOR}\n" "$@" >&2
}

error() {
  local mesg=$1; shift
  printf "${BRed}==> ERREUR:${BWhite} ${mesg}${NOCOLOR}\n" "$@" >&2
}

cleanup() {
  # remove the temporary directory
  rm -rf "${DIR_TEMP}"
  [[ $1 ]] && exit $1
}

die() {
  error "$*"
  cleanup 1
}

# $1 : nom du paquet ( $1 = "$pkg" et pkg = blender-svn)
test_dependance() {
  package="$1"
  # sort out some files which are not supposed to be ELF files anyway.
  packagefiles=`pacman -Qql $package | grep -v "\/$\|\.a\|\.png\|\.la\|\.ttf\|\.gz\|\.html\|\.css\|\.h\|\.xml\|\.rgb\|\.gif\|\.wav\|\.ogg\|\.mp3\|\.po\|\.txt\|\.jpg\|\.jpeg\|\.bmp\|\.xcf\|\.mo\|\.rb\|\.py\|\.lua\|\.config\|\.svg\|\.desktop\|\.conf\|\.pdf\|\.cfg"`
#  packagefiles=($(pacman -Qql $package | grep -v "\/$\|\.a\|\.png\|\.la\|\.ttf\|\.gz\|\.html\|\.css\|\.h\|\.xml\|\.rgb\|\.gif\|\.wav\|\.ogg\|\.mp3\|\.po\|\.txt\|\.jpg\|\.jpeg\|\.bmp\|\.xcf\|\.mo\|\.rb\|\.py\|\.lua\|\.config\|\.svg\|\.desktop\|\.conf\|\.pdf\|\.cfg"))
  IFS=$'\n'
  for file in $packagefiles; do # check the files
      if (( $(file $file | grep -c 'ELF') != 0 )); then
          #  Is an ELF binary.
          if (( $(ldd $file 2>/dev/null | grep -c 'not found') != 0 )); then
              #  Missing lib.
              libs=$(ldd $file 2>/dev/null | grep 'not found' | sed -e "s#not found#non trouvé#g")
              printf "\n\t ${BRed}${package}${NOCOLOR} requiert ${IRed}${libs}${NOCOLOR}"
              BROKEN="true" # to avoid packages being listed in the brokenpkg array several times
          fi
      fi
  done
}

# $1 : nom du paquet ( $1 = "$pkg" et pkg = blender-svn)
traite_paquet_installed() {
  BROKEN="false"
  printf "=> ${BWhite}""$1""${NOCOLOR}..."
  if [[ "$1" == "virtualbox-extension" ]] ; then
      local version_paquet=$(pacman -Qi "$1" 2>/dev/null | awk '/Version/ {print $3}' | sed -e "s/-[0-9]$//")
      local version_vbox=$(pacman -Qi "virtualbox" 2>/dev/null | awk '/Version/ {print $3}' | sed -e "s/-[0-9]$//")
          if [[ "$version_paquet" == "$version_vbox" ]] ; then
              printf " ${BGreen}dépendances OK.${NOCOLOR}\n"
          else
              printf "\n\t ${BRed}"$1" et virtualbox : versions différentes.${NOCOLOR}\n"
              nb_paquet_a_recompiler=$(($nb_paquet_a_recompiler+1))
          fi
  elif [[ "$1" == "cuda980" ]] ; then
      printf " ${BPurple}Pas de vérification des dépendances.${NOCOLOR}\n"
  else
      test_dependance "$1"
      case ${BROKEN} in
          true)
              printf "\n"
              nb_paquet_a_recompiler=$(($nb_paquet_a_recompiler+1)) 
              ;;
          false)
              printf " ${BGreen}dépendances OK.${NOCOLOR}\n"
              ;;
          *)
              error " ==> Catastrophe !!!"
              ;;
      esac
  fi
}

# $1 : nom du paquet ( $1 = "$pkg" et pkg = blender-svn)
traite_paquet() {
  local installed=""
  installed=$(pacman -Qi "$1" 2>/dev/null | awk '/Install Reason/ {print $5}')
  if [[ "$installed" == "installed" ]] ; then
      # Installé ==> Appelle fonction test_dependance
      traite_paquet_installed "$1"
  else
      installed=$(pacman -Qi "$1" 2>/dev/null | awk '/Install Reason/ {print $7}')
      if [[ "$installed" == "dependency" ]] ; then
          # Installé comme dépendance ==> Appelle fonction test_dependance
          traite_paquet_installed "$1"
      else
#          printf "${BWhite}!! ""$1""${White} : non installé (pas de vérification).${NOCOLOR}\n"
          printf "!! ""$1"" : non installé (pas de vérification).\n"
      fi
  fi
}

#
# DEBUT DU SCRIPT
#
msg_titre "+-----------------------------------------------+"
msg_titre "|  Vérification des dépendances de mes paquets  |"
msg_titre "|  Version : 0.8.1                              |"
msg_titre "+-----------------------------------------------+"

# check if DIR_TEMP exists if it's missing, create it.
[[ ! -d "${DIR_TEMP}" ]] && mkdir -p "${DIR_TEMP}"

#msg "Création d'une copie de travail de "${DIR_REPO}" dans "${DIR_TEMP}"."
# copie paquets de 00-repolocal dans /tmp/jndvdeps
cp "${DIR_REPO}"/*.pkg.tar.xz "${DIR_TEMP}"

## POUR TEST
#echo "Contenu de ""${DIR_TEMP}"
#ls "${DIR_TEMP}"
##
echo ""

# Fabrique une liste des paquets depuis /tmp/jndvdeps
liste_pkg=( $(ls "${DIR_TEMP}") )

if [[ ${#liste_pkg[@]} -eq 0 ]]; then
  die "Aucun paquet présent."
fi

# Compteur de paquet à recompiler. Init à 0
nb_paquet_a_recompiler=0

# Compteur de paquet à traiter. Init à 0
nb_paquet_a_traiter=0

# Traite chaque paquet ds liste_pkg
for paquet in "${liste_pkg[@]}"
do
  # ici paquet = amaya-11.4.4-1-x86_64.pkg.tar.xz
  pkg="$(echo -n $paquet | sed -e "s/-[0-9].*.tar.xz$//")"
  # ici pkg = amaya

  nb_paquet_a_traiter=$(($nb_paquet_a_traiter+1))
  # Appelle fonction traite_paquet
  traite_paquet "$pkg"
done


echo ""
# Affiche Nb paquet de traiter
msg "$nb_paquet_a_traiter"" paquets vérifiés."

# Affiche Nb paquet à recompiler si != 0
if [[ $nb_paquet_a_recompiler -gt 0 ]] ; then
  if [[ $nb_paquet_a_recompiler -eq 1 ]] ; then
    printf "${BWhite}:: ${BRed}"$nb_paquet_a_recompiler"${BWhite} paquet doit être recompilé.${NOCOLOR}\n"
  else
    printf "${BWhite}:: ${BRed}"$nb_paquet_a_recompiler"${BWhite} paquets doivent être recompilés.${NOCOLOR}\n"
  fi
else
  msg "Rien à faire : toutes les dépendances sont OK."
fi
echo ""

# Fin du script (OK)
cleanup 0

## POUR TEST
#set +x

exit 0
