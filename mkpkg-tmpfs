#!/usr/bin/env bash

#
# Author: Jean-Noel Dot  <prenom nom @ fournisseur.fr>
# 2013,2014,2015,2016,2019,2020,2021,2024
# 

# VERSION=1.1.9
VERS="@VERSION@"

################################
## POUR TEST
#set -x
################################

#
# CONSTANTES
#
# COULEURS
Bold=$(tput bold)
Underline=$(tput sgr 0 1)
Reset=$(tput sgr0)
# Regular Colors
Red=$(tput setaf 1)
Green=$(tput setaf 2)
Yellow=$(tput setaf 3)
Blue=$(tput setaf 4)
Purple=$(tput setaf 5)
Cyan=$(tput setaf 6)
White=$(tput setaf 7)
# Bold
BRed=${Bold}$(tput setaf 1)
BGreen=${Bold}$(tput setaf 2)
BYellow=${Bold}$(tput setaf 3)
BBlue=${Bold}$(tput setaf 4)
BPurple=${Bold}$(tput setaf 5)
BCyan=${Bold}$(tput setaf 6)
BWhite=${Bold}$(tput setaf 7)

# REPERTOIRES
#REP_TMPFS="/0-Chroot/00-tmpfs-chroot"
REP_TMPFS="$HOME/05-builds/0-chroot/00-tmpfs-chroot"
REP_COPIES="$HOME/05-builds/0-copie-fichiers-chroot"
REP_REPO="/tmp/chrootrepo"

#
# FONCTIONS
#
msg_titre() {
        local mesg=$1; shift
        printf "${Bold}${mesg}${Reset}\n" "$@" >&2
}

msg() {
        local mesg=$1; shift
        printf "${BGreen}:: ${mesg}${Reset}\n" "$@" >&2
}

msg_newline() {
        local mesg=$1; shift
        printf "\n" "$@" >&2
}

error() {
        local mesg=$1; shift
        printf "${BRed}==> ERREUR:${Reset}${Bold} ${mesg}${Reset}\n" "$@" >&2
}

warning() {
        local mesg=$1; shift
        printf "      ${BYellow}!!! => ${Reset}${Bold} ${mesg}${Reset}\n" "$@" >&2
}

cleanup() {
        if [[ -f "/etc/pacman.conf.mkpkg.tmpfs" ]]; then
          sudo mv /etc/pacman.conf.mkpkg.tmpfs /etc/pacman.conf
        fi
        sudo umount -f "${REP_TMPFS}" &>/dev/null
        if (( $? != 0 )); then
          sudo umount -f "${REP_TMPFS}" &>/dev/null
        fi
        rm -rf "${REP_TMPFS}" &>/dev/null
        if (( $? != 0 )); then
          error "Impossible de supprimer le répertoire « ${REP_TMPFS} »"
        fi
        [[ $1 ]] && exit $1
}

die() {
        error "$*"
# Inutile depuis maj devtools 24.10.2014
#         clean_own "${rep_paquet}" "$uid_nobody" &>/dev/null
#         clean_own "${rep_paquet}" "$uid_root" &>/dev/null
        cleanup 2
}

usage() {
        printf '%s\n' "Arguments :"
        printf '%s\n' "-h               Cette aide"
        printf '%s\n' "-m <march>       march : generic ou native ou fast ou floop. Obligatoire"
        printf '%s\n' "-g <8G|24G>      Taille du chroot en Giga : 8G ou 24G. Facultatif : 8G par défaut"
        printf '%s\n' "-l <logs>        Conservations des logs. Facultatif : NON conservés par défaut"
        printf '%s\n' "-q <qt>          UI Framework : qt(5). Facultatif"
        printf '%s\n' "-v <git|svn>     Version Control System : git ou svn. Facultatif"
# Inutile depuis maj devtools 24.10.2014
#         clean_own "${rep_paquet}" "$uid_nobody" &>/dev/null
#         clean_own "${rep_paquet}" "$uid_root" &>/dev/null
        cleanup 0
}

setup_copie_pacman_conf() {
        sudo mv /etc/pacman.conf /etc/pacman.conf.mkpkg.tmpfs
        if (( $? != 0 )); then
          return 9
        fi
        sudo cp -f "${REP_COPIES}"/pacman.conf.mkpkg.tmpfs /etc/pacman.conf
        if (( $? != 0 )); then
          return 9
        fi
}

setup_dir() {
        mkdir "${REP_TMPFS}" &>/dev/null
        if (( $? != 0 )); then
            return 9
        fi
        return 0
}

#
# $1 : $arg_size = 8G ou 24G ou 32G (pour blender)
setup_mount() {
#        mount -t tmpfs -o defaults,size=8G none "${REP_TMPFS}" &>/dev/null
#        mount -t tmpfs -o defaults,size=$1 none "${REP_TMPFS}" &>/dev/null
        if [[ "$1" == "8G" ]]; then
          sudo mount -t tmpfs -o defaults,size=8G none "${REP_TMPFS}" &>/dev/null
          if (( $? != 0 )); then
            return 9
          fi
        elif [[ "$1" == "24G" ]]; then
          sudo mount -t tmpfs -o defaults,size=24G none "${REP_TMPFS}" &>/dev/null
          if (( $? != 0 )); then
            return 9
          fi
        else
          sudo mount -t tmpfs -o defaults,size=32G none "${REP_TMPFS}" &>/dev/null
          if (( $? != 0 )); then
            return 9
          fi
        fi        
        return 0
}

#
# $1 : $arg_qt = "qt"
# $2 : $arg_git = "git"
# $3 : $arg_svn = "subversion"
#
setup_chroot() {
#        mkarchroot -C /etc/pacman.conf -M /etc/makepkg.conf "${REP_TMPFS}"/root base base-devel sudo qt &>/dev/null
#        mkarchroot -C /etc/pacman.conf -M /etc/makepkg.conf "${REP_TMPFS}"/root base base-devel sudo qt
        local arg_chroot=""
        if [[ -n "$1" ]]; then
          arg_chroot+="$1"
        fi
        if [[ -n "$2" ]]; then
          arg_chroot+=" $2"
        fi
        if [[ -n "$3" ]]; then
          arg_chroot+=" $3"
        fi
#        mkarchroot -C /etc/pacman.conf -M /etc/makepkg.conf "${REP_TMPFS}"/root base base-devel sudo ${arg_chroot}
        # Suite maj pacman 4.2
        mkarchroot "${REP_TMPFS}"/root base base-devel sudo ${arg_chroot}
        if (( $? != 0 )); then
          return 9
        fi
        return 0
}

#
# $1 : si qt ( $1 = "$avec_qt" =  false ou = true)
# $2 : arg_flags = "generic" ou "native" ou "fast" ou "floop"
#
setup_copies() {
        if [[ "$1" = true ]]; then
          sudo cp -f "${REP_COPIES}"/qt-gcc-base.conf "${REP_TMPFS}"/root/usr/lib/qt/mkspecs/common/gcc-base.conf
          if (( $? != 0 )); then
            return 9
          fi
        fi
        sudo cp -f "${REP_COPIES}"/mirrorlist "${REP_TMPFS}"/root/etc/pacman.d/mirrorlist
        if (( $? != 0 )); then
          return 9
        fi
        sudo cp -f "${REP_COPIES}"/pacman.conf.chroot "${REP_TMPFS}"/root/etc/pacman.conf
        if (( $? != 0 )); then
          return 9
        fi
        sudo sed -i "s#PATHTOREPOLOCAL#${REP_TMPFS}/$USER#g" "${REP_TMPFS}"/root/etc/pacman.conf
        if (( $? != 0 )); then
          return 9
        fi
        if [[ "$2" == "floop" ]]; then
          sudo cp -f "${REP_COPIES}"/makepkg.conf.floop "${REP_TMPFS}"/root/etc/makepkg.conf
          if (( $? != 0 )); then
            return 9
          fi
        elif [[ "$2" == "fast" ]]; then
          sudo cp -f "${REP_COPIES}"/makepkg.conf.fast "${REP_TMPFS}"/root/etc/makepkg.conf
          if (( $? != 0 )); then
            return 9
          fi
        elif [[ "$2" == "native" ]]; then
          sudo cp -f "${REP_COPIES}"/makepkg.conf.native "${REP_TMPFS}"/root/etc/makepkg.conf
          if (( $? != 0 )); then
            return 9
          fi
        else
          sudo cp -f "${REP_COPIES}"/makepkg.conf.generic "${REP_TMPFS}"/root/etc/makepkg.conf
          if (( $? != 0 )); then
            return 9
          fi
        fi
        return 0
}

setup_chroot_repolocal() {
        sudo mkdir "${REP_TMPFS}"/root/chrootrepolocal
        if (( $? != 0 )); then
          return 9
        fi
        sudo cp -f "${REP_REPO}"/*.pkg.tar.* "${REP_TMPFS}"/root/chrootrepolocal/
        if (( $? != 0 )); then
          return 9
        fi
        sudo rm -f "${REP_TMPFS}"/root/chrootrepolocal/chroot-repolocal.db.tar.gz
        if (( $? != 0 )); then
          return 9
        fi
#        repo-add chroot-repolocal.db.tar.gz *.pkg.tar.* &>/dev/null
        sudo repo-add "${REP_TMPFS}"/root/chrootrepolocal/chroot-repolocal.db.tar.gz "${REP_TMPFS}"/root/chrootrepolocal/*.pkg.tar.*
        if (( $? != 0 )); then
          return 9
        fi
        return 0
}

# Inutile depuis maj devtools 25.05.2013
# setup_maj_chroot() {
# #        mkarchroot -u "${REP_TMPFS}"/root &>/dev/null
#         mkarchroot -u "${REP_TMPFS}"/root
#         if (( $? != 0 )); then
#           return 9
#         fi
#         return 0
# }

# Fonction fabriquant le paquet
#
# $1 : répertoire où est situé le PKGBUILD ( $1 = "${rep_paquet}" )
#
make_paquet() {
#        local rep="$1"
        cd "$1"
        if (( $? != 0 )); then
          return 9
        fi
#        makechrootpkg -c -r "${REP_TMPFS}" &>/dev/null
#        makechrootpkg -c -r "${REP_TMPFS}"
        makechrootpkg -u -c -r "${REP_TMPFS}"
        if (( $? != 0 )); then
          return 9
        fi
        return 0
}

# Fonction supprime fichier(s) .log
#
# $1 : répertoire où est situé le PKGBUILD ( $1 = "${rep_paquet}" )
#
clean_log() {
        cd "$1"
        if (( $? != 0 )); then
          return 9
        fi
        rm -f *.log
        if (( $? != 0 )); then
          return 9
        fi
        return 0
}

# Inutile depuis maj devtools 24.10.2014
# # Fonction remet propriétaire:groupe
# #
# # $1 : répertoire où est situé le PKGBUILD ( $1 = "${rep_paquet}" )
# # $2 : valeur uid ( $2 = 99 nobody ou 0 root )
# # $3 : valeur gid ( $3 = 99 nonody ou 0 root )
# # clean_own "${rep_paquet}" "$uid_root" "$gid_root"
# #
# clean_own() {
#     local rep="$1"
#     local user="$2"
#     local group="$3"
#     cd
#     files=( $(find "$rep" -uid "$user" -print) )
#     if [[ "${#files[@]}" -ne 0 ]]]; then
#         for filechown in "${files[@]}"; do
#             chown ${USER}:users "$filechown"
#         done
#     fi
#     files=( $(find "$rep" -gid "$group" -print) )
#     if [[ "${#files[@]}" -ne 0 ]]]; then
#         for filechown in "${files[@]}"; do
#             chown ${USER}:users "$filechown"
#         done
#     fi
# }

#
# DEBUT DU SCRIPT
#

# Inutile depuis maj devtools 24.10.2014
# nom du script = $0
# nombre d'argument = $#
# liste des arguments = $*
# => Passe en root
# if [[ ! $( id -u ) -eq 0 ]]; then
#     echo -e "\n${BYellow}Le script "$0" doit être exécuté en « root »."
#     echo -e "Entrer le mot de passe de « root »${Reset}"
#     exec su -c "${0} ${*}"
#     exit ${?}
# fi
#

# Titre
msg_titre "+------------------------------------------------------------------------------------------------------------------+"
msg_titre "|                                       Création de paquets en RAM                                                 |"
msg_titre "|                                          ( chroot en tmpfs )                                                     |"
msg_titre "|                                            Version = $VERS                                                       |"
msg_titre "|                                                                                                                  |"
msg_titre "| Usage : mkpkg-tmpfs -m generic|native|fast|floop [-g 8G|24G|32G] [-l logs] [-q qt] [-v git|svn]                  |"
msg_titre "| ou                                                                                                               |"
msg_titre "| Usage : $HOME/bin/mkpkg-tmpfs -m generic|native|fast|floop [-g 8G|24G|32G] [-l logs] [-q qt] [-v git|svn]    |"
msg_titre "|                                                                                                                  |"
msg_titre "| mkpkg-tmpfs -h pour lire l'aide                                                                                  |"
msg_titre "+------------------------------------------------------------------------------------------------------------------+"
msg_newline

# VARIABLES DU SCRIPT
# id nobody ==> uid=99(nobody) gid=99(nobody) groupes=99(nobody)
uid_nobody=$(id -u nobody)
gid_nobody=$(id -g nobody)
# id root ==> uid=0(root) gid=0(root) groupes=0(root)
uid_root=$(id -u root)
gid_root=$(id -g root)

# Nom du script
nom_script="$0"

# Drapeau si qt existe; false = NON , true = OUI
avec_qt=false

# Drapeau si logs existe; false = NON , true = OUI
avec_logs=false

# Arguments pour setup_chroot()
arg_flags=""
arg_qt=""
arg_git=""
arg_svn=""

# Arguments pour setup_mount()
arg_size=""

# RÉPERTOIRE DE TRAVAIL
rep_paquet="$PWD"

# Test si rep_paquet existe et est un répertoire
if [[ ! -d "${rep_paquet}" ]]; then
  die "Le répertoire ${rep_paquet} n'existe pas"
fi


# DÉBUTS DES TESTS DES ARGUMENTS
# Variables tests arguments
arg_march=
arg_qt_5=
arg_vcs=
arg_giga=
arg_logs=

while getopts 'hm:g:l:q:v:' arg; do
        case "$arg" in
                h) usage ;;
                m) arg_march="$OPTARG" ;;
                g) arg_giga="$OPTARG" ;;
                l) arg_logs="$OPTARG" ;;
                q) arg_qt_5="$OPTARG" ;;
                v) arg_vcs="$OPTARG" ;;
        esac
done

# Test si arg_march = generic ou native ou fast ou floop
    if [[ "$arg_march" == "generic" ]]; then
      arg_flags="generic"
    elif [[ "$arg_march" == "native" ]]; then
      arg_flags="native"
    elif [[ "$arg_march" == "fast" ]]; then
      arg_flags="fast"
    elif [[ "$arg_march" == "floop" ]]; then
      arg_flags="floop"
    else
      die "Argument <march> erroné. Usage : ${nom_script} -m generic|native|fast|floop"
    fi

# Test si arg_giga existe et = 8G ou 24G ou 32G. 8G par défaut
if [[ "$arg_giga" != "" ]]; then
    if [[ "$arg_giga" == "8G" ]]; then
      arg_size="8G"
    elif [[ "$arg_giga" == "24G" ]]; then
      arg_size="24G"
    elif [[ "$arg_giga" == "32G" ]]; then
      arg_size="32G"
    else
      die "Argument <8G|24G|32G> erroné. Usage : ${nom_script} -m generic|native|fast|floop -g 8G|24G|32G"
    fi
else
    arg_size="8G"
fi

# avec_logs=false (défaut)
# Test si arg_logs existe et = logs. NON conservés par défaut
if [[ "$arg_logs" != "" ]]; then
    if [[ "$arg_logs" == "logs" ]]; then
      avec_logs=true
    else
      die "Argument <logs> erroné. Usage : ${nom_script} -m generic|native|fast|floop -l logs"
    fi
else
    avec_logs=false
fi


# avec_qt=false (défaut)
# Test si arg_qt_5 existe et = qt
if [[ "$arg_qt_5" != "" ]]; then
    if [[ "$arg_qt_5" == "qt" ]]; then
      avec_qt=true
      arg_qt="qt"
    else
      die "Argument <qt> erroné. Usage : ${nom_script} -m generic|native|fast|floop -q qt"
    fi
fi

# Test si arg_vcs existe et = git ou svn
if [[ "$arg_vcs" != "" ]]; then
    if [[ "$arg_vcs" == "git" ]]; then
      arg_git="git"
    elif [[ "$arg_vcs" == "svn" ]]; then
        arg_svn="subversion"
    else
      die "Argument <git|svn> erroné. Usage : ${nom_script} -m generic|native|fast|floop -v git|svn"
    fi
fi


# Lecture de CARCH="x86_64" ds /etc/makepkg.conf
eval $(grep 'CARCH=' "/etc/makepkg.conf")
architecture="${CARCH}"
## Lecture de PKGEXT ds /etc/makepkg.conf
#eval $(grep 'PKGEXT=' "/etc/makepkg.conf")
#extension_paquet="${PKGEXT}"


# Nom Paquet, Version et Release
nom_paquet=""
num_version=""
num_release=""
cd "${rep_paquet}"
if [[ -f "PKGBUILD" ]]; then
  eval $(grep '^pkgname=' "PKGBUILD")
  if [[ -n "${pkgname}" ]]; then
    nom_paquet="${pkgname}"
  else
    eval $(grep '^pkgbase=' "PKGBUILD")
    if [[ -n "${pkgbase}" ]]; then                # cas paquet linux
      nom_paquet="${pkgbase}"
    fi
  fi
  eval $(grep '^pkgver=' "PKGBUILD")
  if [[ -n "${pkgver}" ]]; then
    num_version="${pkgver}"
  fi
  eval $(grep '^pkgrel=' "PKGBUILD")
  if [[ -n "${pkgrel}" ]]; then
    num_release="${pkgrel}"
  fi
else
  die "Aucun fichier « PKGBUILD » présent"
fi
cd


# MISE EN PLACE CHROOT
#
msg "Mise en place du chroot en RAM ..."

setup_copie_pacman_conf
if (( $? != 0 )); then
  die "Copie du fichier « pacman.conf » impossible."
fi


# Création du répertoire build
setup_dir
if (( $? != 0 )); then
  die "Impossible de créer le répertoire « ${REP_TMPFS} »"
fi

setup_mount "$arg_size"
if (( $? != 0 )); then
  die "Impossible d'effectuer le montage de « ${REP_TMPFS} »."
fi

setup_chroot "$arg_qt" "$arg_git" "$arg_svn"
if (( $? != 0 )); then
  die "Création chroot impossible."
fi

setup_copies $avec_qt "$arg_flags"
if (( $? != 0 )); then
  die "Copie des fichiers impossible."
fi

setup_chroot_repolocal
if (( $? != 0 )); then
  die "Création de « chroot-repolocal » dans chroot impossible."
fi

# Inutile depuis maj devtools 25.05.2013
# setup_maj_chroot
# if (( $? != 0 )); then
#   die "M A J chroot impossible."
# fi


# FAIRE LE PAQUET
#
msg_newline
if [[ -n "$arg_git" ]] || [[ -n "$arg_svn" ]]; then
  msg "Fabrication du paquet « $nom_paquet » ..."
else
  msg "Fabrication du paquet « $nom_paquet $num_version » ..."
fi
msg_newline

make_paquet "${rep_paquet}"
# if (( $? != 0 )); then
#   error "Fabrication du paquet « ""$nom_paquet"" » impossible."
#   warning "Faire : cd "${REP_TMPFS}"/copy/build pour inspection."
#   warning "Quand fini, appuyer sur une touche pour quitter le script."
#   read -e -sn 1 -p "..."
#   die "Terminé."
# fi
# makechrootpkg NE retourne PLUS de code d'erreur
#if [[ ! -f "${rep_paquet}/$nom_paquet-$num_version-$num_release-${architecture}${extension_paquet}" ]]; then
#  if [[ ! -f "${rep_paquet}/$nom_paquet-$num_version-$num_release-any${extension_paquet}" ]]; then
if [[ ! -f "${rep_paquet}/$nom_paquet-$num_version-$num_release-${architecture}.pkg.tar.xz" ]]; then
  if [[ ! -f "${rep_paquet}/$nom_paquet-$num_version-$num_release-${architecture}.pkg.tar.zst" ]]; then
    if [[ ! -f "${rep_paquet}/$nom_paquet-$num_version-$num_release-any.pkg.tar.xz" ]]; then
      if [[ ! -f "${rep_paquet}/$nom_paquet-$num_version-$num_release-any.pkg.tar.zst" ]]; then
        error "Fabrication du paquet « $nom_paquet » impossible."
        warning "Faire : cd ${REP_TMPFS}/${USER}/build pour inspection."
        warning "Quand fini :"
        warning "==> fermer tous les fichiers ouverts."
        warning "==> appuyer sur une touche pour quitter le script."
        read -e -sn 1 -p "..."
        die "Terminé."
      fi
    fi
  fi
fi

# NETTOYAGE
#
# avec_logs=false
if [[ "$avec_logs" = false ]]; then
  msg_newline
  msg "Suppression des fichiers « .log » ..."

  clean_log "${rep_paquet}"
  if (( $? != 0 )); then
    die "Suppression des fichiers « .log » impossible."
  fi
else
  msg_newline
  msg "Fichiers « .log » conservés."

fi

# Inutile depuis maj devtools 24.10.2014
# # CHANGE PERMISSIONS
# #
# msg_newline
# msg "Remet propriétaire:groupe à « ""${USER}"":users » ..."
# 
# clean_own "${rep_paquet}" "$uid_nobody" "$gid_nobody"
# clean_own "${rep_paquet}" "$uid_root" "$gid_root"


# FIN COMPILE EN RAM
#
msg_newline
if [[ -n "$arg_git" ]] || [[ -n "$arg_svn" ]]; then
  msg "Fabrication du paquet « $nom_paquet » terminée."
else
  msg "Fabrication du paquet « $nom_paquet $num_version » terminée."
fi
msg_newline

cd
cleanup 0


################################
## POUR TEST
#set +x
################################

exit 0
